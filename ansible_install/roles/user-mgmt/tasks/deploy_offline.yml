#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Create Secret user-mgmt-jwt-secret
  shell: |
    kubectl create secret generic {{ usermgmt_jwt_secretName }} \
      --from-file=publicKey={{ TARBALL_PATH }}/conf/keys/rsa_public_key.pem \
      --from-file=encryptedPrivateKey={{ TARBALL_PATH }}/conf/keys/encrypted_rsa_private_key.pem \
      --from-literal=encryptPassword={{ certPassword }}
  no_log: true
  ignore_errors: yes
  register: usermgmt_out

- name: Output of "Create Secret user-mgmt-jwt-secret" task
  debug:
    msg: "rc: {{usermgmt_out.rc}}, stderr: {{usermgmt_out.stderr}}, stderr_lines: {{usermgmt_out.stderr_lines}}, stdout: {{usermgmt_out.stdout}}, stdout_lines: {{usermgmt_out.stdout_lines}}"
  when: usermgmt_out is failed

- name: Failing as task "Create Secret user-mgmt-jwt-secret" failed
  fail:
    msg: The task Create Secret user-mgmt-jwt-secret has failed
  when: usermgmt_out is failed

- name: Deploy USER_MGMT
  shell: |
    helm install --wait user-mgmt-edgegallery {{ HELM_CHARTS_PATH }}/edgegallery/usermgmt-{{ HELM_TAG }}.tgz \
    --set global.oauth2.clients.appstore.clientUrl=https://{{ PORTAL_IP }}:{{ APPSTORE_PORT }} \
    --set global.oauth2.clients.appstore.clientAccessUrl={{ APPSTORE_ACCESS_URL }} \
    --set global.oauth2.clients.appstore.clientSecret={{ oauth2ClientPassword }} \
    --set global.oauth2.clients.developer.clientUrl=https://{{ PORTAL_IP }}:{{ DEVELOPER_PORT }} \
    --set global.oauth2.clients.developer.clientAccessUrl={{ DEVELOPER_ACCESS_URL }} \
    --set global.oauth2.clients.developer.clientSecret={{ oauth2ClientPassword }} \
    --set global.oauth2.clients.mecm.clientUrl=https://{{ PORTAL_IP }}:{{ MECM_PORT }} \
    --set global.oauth2.clients.mecm.clientAccessUrl={{ MECM_ACCESS_URL }} \
    --set global.oauth2.clients.mecm.clientSecret={{ oauth2ClientPassword }} \
    --set global.oauth2.clients.atp.clientUrl=https://{{ PORTAL_IP }}:{{ ATP_PORT }} \
    --set global.oauth2.clients.atp.clientAccessUrl={{ ATP_ACCESS_URL }} \
    --set global.oauth2.clients.atp.clientSecret={{ oauth2ClientPassword }} \
    --set global.oauth2.clients.lab.clientUrl=https://{{ PORTAL_IP }}:{{ LAB_PORT }} \
    --set global.oauth2.clients.lab.clientSecret={{ oauth2ClientPassword }} \
    --set global.oauth2.clients.edgegallery.clientUrl=https://{{ PORTAL_IP }}:{{ EDGEGALLERY_PORT }} \
    --set global.oauth2.clients.edgegallery.clientAccessUrl={{ EDGEGALLERY_ACCESS_URL }} \
    --set global.oauth2.clients.edgegallery.clientSecret={{ oauth2ClientPassword }} \
    --set jwt.secretName={{ usermgmt_jwt_secretName }} \
    --set images.usermgmt.repository={{ usermgmt_images_usermgmt_repository }} \
    --set images.postgres.repository={{ usermgmt_images_postgres_repository }} \
    --set images.redis.repository={{ usermgmt_images_redis_repository }} \
    --set images.initservicecenter.repository={{ usermgmt_images_initservicecenter_repository }} \
    --set images.usermgmt.tag={{ usermgmt_images_usermgmt_tag }} \
    --set images.postgres.tag={{ usermgmt_images_postgres_tag }} \
    --set images.redis.tag={{ usermgmt_images_redis_tag }} \
    --set images.initservicecenter.tag={{ usermgmt_images_initservicecenter_tag }} \
    --set images.usermgmt.pullPolicy={{ usermgmt_images_usermgmt_pullPolicy }} \
    --set images.postgres.pullPolicy={{ usermgmt_images_postgres_pullPolicy }} \
    --set images.redis.pullPolicy={{ usermgmt_images_redis_pullPolicy }} \
    --set images.initservicecenter.pullPolicy={{ usermgmt_images_initservicecenter_pullPolicy }} \
    --set global.ssl.enabled={{ usermgmt_global_ssl_enabled }} \
    --set global.ssl.secretName={{ usermgmt_global_ssl_secretName }} \
    --set global.persistence.enabled={{ ENABLE_PERSISTENCE }} \
    --set postgres.password={{ postgresPassword }} \
    --set redis.password={{ userMgmtRedisPassword }} \
    --set mail.enabled={{ usermgmt_mail_enabled }} \
    --set mail.host={{ usermgmt_mail_host }} \
    --set mail.port={{ usermgmt_mail_port }} \
    --set mail.sender={{ usermgmt_mail_sender }} \
    --set mail.authCode={{ usermgmt_mail_authcode }}
  no_log: true
  ignore_errors: true
  register: user_mgmtout

- name: Output of "Deploy USER_MGMT" task
  debug:
    msg: "rc: {{user_mgmtout.rc}}, stderr: {{user_mgmtout.stderr}}, stderr_lines: {{user_mgmtout.stderr_lines}}, stdout: {{user_mgmtout.stdout}}, stdout_lines: {{user_mgmtout.stdout_lines}}"
  when: user_mgmtout is failed

- name: Failing as task "Deploy USER_MGMT" failed
  fail:
    msg: The task Deploy USER_MGMT has failed
  when: user_mgmtout is failed

- name: Check USER_MGMT Status
  uri:
    url: "https://{{ PORTAL_IP }}:{{ USER_MGMT_PORT }}/health"
    validate_certs: no
