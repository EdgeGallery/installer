#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Setup Nginx Ingress Controller
  shell: |
    helm install --wait eg-ingress {{ HELM_CHARTS_PATH }}/stable/nginx-ingress-1.41.2.tgz \
      --set controller.service.type=NodePort \
      --set controller.service.nodePorts.http=30102 \
      --set controller.service.nodePorts.https=31252 \
      --set controller.image.registry="" \
      --set controller.image.repository={{ ingress_controller_image_repository }} \
      --set controller.admissionWebhooks.patch.image.repository={{ ingress_controller_admissionWebhooks_patch_image_repository }} \
      --set defaultBackend.image.repository={{ ingress_defaultBackend_image_repository }} \
      -f "{{role_path}}"/files/ingress.yaml
  when: K8S_NODE_TYPE == "master" and EG_MODE != "controller" and ENABLE_INGRESS is true and ARCH == "amd64"

- name: Create Secret mecm-mepm-jwt-public-secret
  shell: |
    kubectl create secret generic mecm-mepm-jwt-public-secret \
      --from-file=publicKey={{ TARBALL_PATH }}/conf/keys/rsa_public_key.pem

- name: Create Secret mecm-mepm-ssl-secret
  shell: |
    kubectl create secret generic mecm-mepm-ssl-secret \
      --from-file=server_tls.key={{ TARBALL_PATH }}/conf/keys/tls.key \
      --from-file=server_tls.crt={{ TARBALL_PATH }}/conf/keys/tls.crt \
      --from-file=ca.crt={{ TARBALL_PATH }}/conf/keys/ca.crt

- name: Create Secret edgegallery-mepm-secret
  shell: |
    kubectl create secret generic edgegallery-mepm-secret \
      --from-file=postgres_init.sql={{ TARBALL_PATH }}/conf/keys/postgres_init.sql \
      --from-literal=postgresPassword={{ postgresPassword }} \
      --from-literal=postgresLcmCntlrPassword={{ postgresPassword }} \
      --from-literal=postgresk8sPluginPassword={{ postgresPassword }} \
      --from-literal=postgresosPluginPassword={{ postgresPassword }} \
      --from-literal=postgresRuleMgrPassword={{ postgresPassword }}
  no_log: true
  ignore_errors: yes
  register: mepm_secretedge

- name: Output of "Create Secret edgegallery-mepm-secret" task
  debug:
    msg: "rc: {{mepm_secretedge.rc}}, stderr: {{mepm_secretedge.stderr}}, stderr_lines: {{mepm_secretedge.stderr_lines}}, stdout: {{mepm_secretedge.stdout}}, stdout_lines: {{mepm_secretedge.stdout_lines}}"
  when: mepm_secretedge is failed

- name: Failing as task "Create Secret edgegallery-mepm-secret" failed
  fail:
    msg: The task Create Secret edgegallery-mepm-secret has failed
  when: mepm_secretedge is failed

- name: Create MECM-MEPM Service Account
  shell: "kubectl apply -f {{ TARBALL_PATH }}/conf/manifest/mepm/mepm-service-account.yaml"

- name: Deploy MECM-MEPM
  shell: |
    helm install --wait mecm-mepm-edgegallery {{ HELM_CHARTS_PATH }}/edgegallery/mecm-mepm-{{ HELM_TAG }}.tgz \
    --set jwt.publicKeySecretName=mecm-mepm-jwt-public-secret \
    --set mepm.secretName=edgegallery-mepm-secret \
    --set ssl.secretName=mecm-mepm-ssl-secret \
    --set images.lcmcontroller.repository={{ mepm_images_lcmcontroller_repository }} \
    --set images.k8splugin.repository={{ mepm_images_k8splugin_repository }} \
    --set images.osplugin.repository={{ mepm_images_osplugin_repository }} \
    --set images.apprulemgr.repository={{ mepm_images_apprulemgr_repository }} \
    --set images.mepmFe.repository={{ mepm_images_mepmFe_repository }} \
    --set images.postgres.repository={{ mepm_images_postgres_repository }} \
    --set images.lcmcontroller.tag={{ EG_IMAGE_TAG }} \
    --set images.k8splugin.tag={{ EG_IMAGE_TAG }} \
    --set images.osplugin.tag={{ EG_IMAGE_TAG }} \
    --set images.apprulemgr.tag={{ EG_IMAGE_TAG }} \
    --set images.mepmFe.tag={{ EG_IMAGE_TAG }} \
    --set images.postgres.tag={{ mepm_images_postgres_tag }} \
    --set images.lcmcontroller.pullPolicy={{ mepm_images_lcmcontroller_pullPolicy }} \
    --set images.k8splugin.pullPolicy={{ mepm_images_k8splugin_pullPolicy }} \
    --set images.osplugin.pullPolicy={{ mepm_images_osplugin_pullPolicy }} \
    --set images.apprulemgr.pullPolicy={{ mepm_images_apprulemgr_pullPolicy }} \
    --set images.mepmFe.pullPolicy={{ mepm_images_mepmFe_pullPolicy }} \
    --set images.postgres.pullPolicy={{ mepm_images_postgres_pullPolicy }} \
    --set global.persistence.enabled={{ ENABLE_PERSISTENCE }}
  no_log: true
  ignore_errors: yes
  register: mecm_mepmout

- name: Output of "Deploy MECM-MEPM" task
  debug:
    msg: "rc: {{mecm_mepmout.rc}}, stderr: {{mecm_mepmout.stderr}}, stderr_lines: {{mecm_mepmout.stderr_lines}}, stdout: {{mecm_mepmout.stdout}}, stdout_lines: {{mecm_mepmout.stdout_lines}}"
  when: mecm_mepmout is failed

- name: Failing as task "Deploy MECM-MEPM" failed
  fail:
    msg: The task Deploy MECM-MEPM has failed
  when: mecm_mepmout is failed
