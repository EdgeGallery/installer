#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Clean MEP Certs Directory
  file:
    path: "{{ MEP_CERTS_DIR }}"
    state: absent

- name: Create MEP Certs Directory
  file:
    path: "{{ MEP_CERTS_DIR }}"
    state: directory

- name: Generate CA Key
  shell: "openssl genrsa -out ca.key 2048"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate CA Csr
  shell: "openssl req -new -key ca.key -subj /C=CN/ST=Peking/L=Beijing/O=edgegallery/CN={{ DOMAIN_NAME }} -out ca.csr"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate CA Crt
  shell: "openssl x509 -req -days 365 -in ca.csr -extensions v3_ca -signkey ca.key -out ca.crt"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate TLS Key
  shell: "openssl genrsa -out {{ CERT_NAME }}_tls.key 2048"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate Encryped TLS Key
  shell: "openssl rsa -in {{ CERT_NAME }}_tls.key -aes256 -passout pass:{{ certPassword }} -out {{ CERT_NAME }}_encryptedtls.key"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate TLS Csr
  shell: "openssl req -new -key {{ CERT_NAME }}_tls.key -subj /C=CN/ST=Beijing/L=Beijing/O=edgegallery/CN={{ DOMAIN_NAME }} -out {{ CERT_NAME }}_tls.csr"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate TLS Crt
  shell: "openssl x509 -req -days 365 -in {{ CERT_NAME }}_tls.csr -extensions v3_req -CA ca.crt -CAkey ca.key -CAcreateserial -out {{ CERT_NAME }}_tls.crt"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate JWT Private Key
  shell: "openssl genrsa -out jwt_privatekey 2048"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate JWT Public Key
  shell: "openssl rsa -in jwt_privatekey -pubout -out jwt_publickey"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Generate JWT Encrypted Private Key
  shell: "openssl rsa -in jwt_privatekey -aes256 -passout pass:{{ certPassword }} -out jwt_encrypted_privatekey"
  args:
    chdir: "{{ MEP_CERTS_DIR }}"

- name: Set Mode of all Files
  file:
    path: "{{ MEP_CERTS_DIR }}"
    mode: 0600
    state: directory
    recurse: yes

- name: Create MEP Namespace
  shell: kubectl create ns mep

- name: Create Secret pg-secret
  shell: |
    kubectl -n mep create secret generic pg-secret \
      --from-literal=pg_admin_pwd={{ postgresPassword }} \
      --from-literal=kong_pg_pwd={{ postgresPassword }} \
      --from-file=server.key={{ MEP_CERTS_DIR }}/{{ CERT_NAME }}_tls.key \
      --from-file=server.crt={{ MEP_CERTS_DIR }}/{{ CERT_NAME }}_tls.crt
  no_log: true
  ignore_errors: yes
  register: pgsecret_out

- name: Output of "Create Secret pg-secret" task
  debug:
    msg: "rc: {{pgsecret_out.rc}}, stderr: {{pgsecret_out.stderr}}, stderr_lines: {{pgsecret_out.stderr_lines}}, stdout: {{pgsecret_out.stdout}}, stdout_lines: {{pgsecret_out.stdout_lines}}"
  when: pgsecret_out is failed

- name: Failing as task "Create Secret pg-secret" failed
  fail:
    msg: The task Create Secret pg-secret has failed
  when: pgsecret_out is failed

- name: Create Secret mep-ssl
  shell: |
    kubectl -n mep create secret generic mep-ssl \
      --from-literal=root_key="$(openssl rand -base64 256 | tr -d '\n' | tr -dc '[[:alnum:]]' | cut -c -256)" \
      --from-literal=cert_pwd={{ certPassword }} \
      --from-file=server.cer={{ MEP_CERTS_DIR }}/{{ CERT_NAME }}_tls.crt \
      --from-file=server_key.pem={{ MEP_CERTS_DIR }}/{{ CERT_NAME }}_encryptedtls.key \
      --from-file=trust.cer={{ MEP_CERTS_DIR }}/ca.crt
  no_log: true
  ignore_errors: yes
  register: mep_sslout

- name: Output of "Create Secret mep-ssl" task
  debug:
    msg: "rc: {{mep_sslout.rc}}, stderr: {{mep_sslout.stderr}}, stderr_lines: {{mep_sslout.stderr_lines}}, stdout: {{mep_sslout.stdout}}, stdout_lines: {{mep_sslout.stdout_lines}}"
  when: mep_sslout is failed

- name: Failing as task "Create Secret mep-ssl" failed
  fail:
    msg: The task Create Secret mep-ssl has failed
  when: mep_sslout is failed

- name: Create Secret mepauth-secret
  shell: |
    kubectl -n mep create secret generic mepauth-secret \
      --from-file=server.crt={{ MEP_CERTS_DIR }}/{{ CERT_NAME }}_tls.crt \
      --from-file=server.key={{ MEP_CERTS_DIR }}/{{ CERT_NAME }}_tls.key \
      --from-file=ca.crt={{ MEP_CERTS_DIR }}/ca.crt \
      --from-file=jwt_publickey={{ MEP_CERTS_DIR }}/jwt_publickey \
      --from-file=jwt_encrypted_privatekey={{ MEP_CERTS_DIR }}/jwt_encrypted_privatekey

- name: Remove MEP Certs Directory
  file:
    path: "{{ MEP_CERTS_DIR }}"
    state: absent
