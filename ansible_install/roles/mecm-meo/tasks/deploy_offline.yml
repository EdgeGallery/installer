#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Create Secret mecm-ssl-secret
  shell: |
    kubectl create secret generic {{ meo_ssl_secretName }} \
    --from-file=keystore.p12={{ TARBALL_PATH }}/conf/keys/keystore.p12 \
    --from-file=keystore.jks={{ TARBALL_PATH }}/conf/keys/keystore.jks \
    --from-literal=keystorePassword={{ keystorePassword }} \
    --from-literal=keystoreType={{ keystoreType }} \
    --from-literal=keyAlias={{ keyAlias }} \
    --from-literal=truststorePassword={{ truststorePassword }}
  no_log: true
  ignore_errors: yes
  register: mecm_sslsecret

- name: Output of "Create Secret mecm-ssl-secret" task
  debug:
    msg: "rc: {{mecm_sslsecret.rc}}, stderr: {{mecm_sslsecret.stderr}}, stderr_lines: {{mecm_sslsecret.stderr_lines}}, stdout: {{mecm_sslsecret.stdout}}, stdout_lines: {{mecm_sslsecret.stdout_lines}}"
  when: mecm_sslsecret is failed

- name: Failing as task "Create Secret mecm-ssl-secret" failed
  fail:
    msg: The task Create Secret mecm-ssl-secret has failed
  when: mecm_sslsecret is failed

- name : Create Secret edgegallery-mecm-secret
  shell: |
    kubectl create secret generic {{ meo_mecm_secretName }} \
      --from-file=postgres_init.sql={{ TARBALL_PATH }}/conf/keys/postgres_init.sql \
      --from-literal=postgresPassword={{ postgresPassword }} \
      --from-literal=postgresApmPassword={{ postgresApmPassword }} \
      --from-literal=postgresAppoPassword={{ postgresAppoPassword }} \
      --from-literal=postgresInventoryPassword={{ postgresInventoryPassword }} \
      --from-literal=dockerRepoUserName=admin \
      --from-literal=dockerRepoPassword={{ HARBOR_ADMIN_PASSWORD }}
  no_log: true
  ignore_errors: yes
  register: secret_edge

- name: Output of "Create Secret edgegallery-mecm-secret" task
  debug:
    msg: "rc: {{secret_edge.rc}}, stderr: {{secret_edge.stderr}}, stderr_lines: {{secret_edge.stderr_lines}}, stdout: {{secret_edge.stdout}}, stdout_lines: {{secret_edge.stdout_lines}}"
  when: secret_edge is failed

- name: Failing as task "Create Secret edgegallery-mecm-secret" failed
  fail:
    msg: The task Create Secret edgegallery-mecm-secret has failed
  when: secret_edge is failed

- name: Ensure User Group "docker" Exists
  group:
    name: docker
    state: present
  register: dockerGroup

- name: Deploy MECM-MEO
  shell: |
    helm install --wait mecm-meo-edgegallery {{ HELM_CHARTS_PATH }}/edgegallery/mecm-meo-{{ HELM_TAG }}.tgz \
    --set global.oauth2.authServerAddress=https://{{ PORTAL_IP }}:{{ USER_MGMT_PORT }} \
    --set global.oauth2.clients.mecm.clientSecret={{ mecmFeOauth2ClientSecret }} \
    --set images.mecmFe.repository={{ mecm_fe_images_mecmFe_repository }} \
    --set images.initservicecenter.repository={{ mecm_fe_images_initservicecenter_repository }} \
    --set images.mecmFe.tag={{ mecm_fe_images_mecmFe_tag }} \
    --set images.initservicecenter.tag={{ mecm_fe_images_initservicecenter_tag }} \
    --set images.mecmFe.pullPolicy={{ mecm_fe_images_mecmFe_pullPolicy }} \
    --set images.initservicecenter.pullPolicy={{ mecm_fe_images_initservicecenter_pullPolicy }} \
    --set global.ssl.enabled={{ mecm_fe_global_ssl_enabled }} \
    --set global.ssl.secretName={{ mecm_fe_global_ssl_secretName }} \
    --set ssl.secretName={{ meo_ssl_secretName }} \
    --set global.ssl.enabled={{ meo_global_ssl_enabled }} \
    --set mecm.secretName={{ meo_mecm_secretName }} \
    --set images.inventory.repository={{ meo_images_inventory_repository }} \
    --set images.appo.repository={{ meo_images_appo_repository }} \
    --set images.apm.repository={{ meo_images_apm_repository }} \
    --set images.postgres.repository={{ meo_images_postgres_repository }} \
    --set images.inventory.tag={{ meo_images_inventory_tag }} \
    --set images.appo.tag={{ meo_images_appo_tag }} \
    --set images.apm.tag={{ meo_images_apm_tag }} \
    --set images.postgres.tag={{ meo_images_postgres_tag }} \
    --set images.inventory.pullPolicy={{ meo_images_inventory_pullPolicy }} \
    --set images.appo.pullPolicy={{ meo_images_appo_pullPolicy }} \
    --set images.apm.pullPolicy={{ meo_images_apm_pullPolicy }} \
    --set images.postgres.pullPolicy={{ meo_images_postgres_pullPolicy }} \
    --set mecm.docker.fsgroup={{ dockerGroup.gid }} \
    --set global.persistence.enabled={{ ENABLE_PERSISTENCE }} \
    --set mecm.repository.dockerRepoEndpoint={{ PORTAL_IP }} \
    --set mecm.repository.sourceRepos="repo={{ PORTAL_IP }} userName=admin password={{ HARBOR_ADMIN_PASSWORD }}"
  no_log: true
  ignore_errors: yes
  register: mecm-meoout

- name: Output of "Deploy MECM-MEO" task
  debug:
    msg: "rc: {{mecm-meoout.rc}}, stderr: {{mecm-meoout.stderr}}, stderr_lines: {{mecm-meoout.stderr_lines}}, stdout: {{mecm-meoout.stdout}}, stdout_lines: {{mecm-meoout.stdout_lines}}"
  when: mecm-meoout is failed

- name: Failing as task "Deploy MECM-MEO" failed
  fail:
    msg: The task Deploy MECM-MEO has failed
  when: mecm-meoout is failed

- name: Check MECM-MEO Status
  uri:
    url: "https://{{ PORTAL_IP }}:{{ item }}/v1/health"
    validate_certs: no
  loop:
    - 30201/appo
    - 30202/apm
    - 30203/inventory
