#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Load k8s Images
  command: docker load --input "{{ DOCKER_OFFLINE_DIR }}/images/{{ K8S_TAR_IMAGE }}"

- name: Install k8s Tools
  copy:
    dest: /usr/bin
    src: "{{ K8S_OFFLINE_DIR }}/k8s/{{ item }}"
    mode: '0755'
    remote_src: yes
  loop:
    - kubectl
    - kubeadm
    - kubelet

- name: Copy Kubelet Service File to /etc/systemd/system/
  copy:
    dest: /etc/systemd/system/
    src: "{{ K8S_OFFLINE_DIR }}/k8s/kubelet.service"
    remote_src: yes

- name: Create the Directory for Kubelet
  file:
    path: /etc/systemd/system/kubelet.service.d
    state: directory

- name: Copy Kubeadm Config File to /etc/systemd/system/kubelet.service.d
  copy:
    dest: /etc/systemd/system/kubelet.service.d
    src: "{{ K8S_OFFLINE_DIR }}/k8s/10-kubeadm.conf"
    remote_src: yes

- name: System Daemon Reload
  command: systemctl daemon-reload

- name: Enable kubelet Service
  service:
    name: kubelet.service
    enabled: yes

- name: Stop Firewalld Service
  service:
    name: firewalld
    state: stopped
  ignore_errors: yes

- name: Disable Firewalld Service
  service:
    name: firewalld
    enabled: no
  ignore_errors: yes

- name: Off Swap Area
  command: swapoff -a

- name: Sed File /etc/fstab
  command: sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  
- name: Modprobe br_netfilter
  command: modprobe br_netfilter

- name: Copy K8s Config File to /etc/sysctl.d/
  copy:
    dest: /etc/sysctl.d/
    src: "{{ K8S_OFFLINE_DIR }}/k8s/k8s.conf"
    remote_src: yes

- name: Load Config Files
  command: sysctl --system

- name: Install Package conntrack
  command: dpkg -i "{{ K8S_OFFLINE_DIR }}/tools/conntrack_1.4.4+snapshot20161117-6ubuntu2_{{ ARCH }}.deb"

- name: Install Package socat
  command: dpkg -i "{{ K8S_OFFLINE_DIR }}/tools/socat_1.7.3.2-2ubuntu2_{{ ARCH }}.deb"

- name: Set Network Interface For Calico
  replace:
    path: "{{ K8S_OFFLINE_DIR }}/k8s/calico.yaml"
    regexp: "interface=.*"
    replace: "interface={{ NETWORK_INTERFACE }}"

- name: Install K8S Master Special Configurations
  import_tasks: k8s_master_install_offline.yml
  when: K8S_NODE_TYPE == "master"

- name: Install K8S Worker Special Configurations
  import_tasks: k8s_worker_install_offline.yml
  when: K8S_NODE_TYPE == "worker"

- name: Wait for calico-node Pod is Ready
  shell: |
    nodes_num=`kubectl get nodes | wc -l`
    ((nodes_num=nodes_num-1))
    calico_num=`kubectl get pods -A | grep "calico-node" | grep "Running" | wc -l`
    if [ $nodes_num == $calico_num ]; then echo "true"; else echo "false"; fi
  register: calicoPodNum
  until: calicoPodNum.stdout == "true"
  retries: 30
  delay: 5

- name: Wait for kube-proxy Pod is Ready
  shell: |
    nodes_num=`kubectl get nodes | wc -l`
    ((nodes_num=nodes_num-1))
    kube_proxy_num=`kubectl get pods -A | grep "kube-proxy" | grep "Running" | wc -l`
    if [ $nodes_num == $kube_proxy_num ]; then echo "true"; else echo "false"; fi
  register: kubePodNum
  until: kubePodNum.stdout == "true"
  retries: 30
  delay: 5

- name: Wait for All K8s Pods are Ready
  shell: kubectl -n kube-system get pods -o custom-columns=POD:metadata.name,READY-true:status.containerStatuses[*].ready
  register: status
  until: status.stdout.find("false") == -1
  retries: 30
  delay: 5

- name: Check whether k8s is installed
  command: kubectl cluster-info
