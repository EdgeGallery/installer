#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Check Whether Docker Compose Installed
  shell: docker-compose version
  register: dockerComposeInstalled
  ignore_errors: yes

- name: Install Docker Compose
  copy:
    src: "{{ HARBOR_DIR }}/docker-compose"
    dest: /usr/local/bin/
    mode: '0755'
    remote_src: yes
  when: dockerComposeInstalled is failed

- name: Check Whether Docker Compose Installed Successfully
  shell: docker-compose version
  when: dockerComposeInstalled is failed

- name: Create Directory to Unarchive harbor.tar.gz
  file:
    path: "{{ HARBOR_DIR }}/harbor"
    state: directory
  when: HarborIP is undefined

- name: Unarchive harbor.tar.gz
  unarchive:
    src: "{{ HARBOR_DIR }}/harbor.tar.gz"
    dest: "{{ HARBOR_DIR }}/harbor"
    copy: no
  when: HarborIP is undefined

- name: Write SLL Rand
  shell: openssl rand -writerand .rnd
  args:
    chdir: /root
  when: HarborIP is undefined

- name: Generate RSA Key File
  shell: openssl genrsa -out ca.key 4096
  args:
    chdir: "{{ HARBOR_DIR }}/harbor/cert"
  when: HarborIP is undefined

- name: Generate RSA Crt File
  shell: |
    openssl req -x509 -new -nodes -sha512 -days 3650 \
    -subj "/C=CN/ST=Guangzhou/L=Guangzhou/O=example/CN="{{ HarborIP }} \
    -key ca.key -out ca.crt
  args:
    chdir: "{{ HARBOR_DIR }}/harbor/cert"
  when: HarborIP is undefined

- name: Generate RSA Cert File
  shell: openssl x509 -inform PEM -in ca.crt -out ca.cert
  args:
    chdir: "{{ HARBOR_DIR }}/harbor/cert"
  when: HarborIP is undefined

- name: Create Directory Under /etc/docker/certs.d to Store Cert File
  file:
    path: "/etc/docker/certs.d/{{ HarborIP }}:443"
    state: directory
  when: HarborIP is undefined

- name: Copy Cert File to the New Directory Under /etc/docker/certs.d
  copy:
    src: "{{ HARBOR_DIR }}/harbor/cert/ca.cert"
    dest: "/etc/docker/certs.d/{{ HarborIP }}:443"
    remote_src: yes
  when: HarborIP is undefined

- name: Set Hostname for Harbor
  replace:
    path: "{{ HARBOR_DIR }}/harbor/harbor.yml"
    regexp: "hostname: .*"
    replace: "hostname: {{ HarborIP }}"
  when: HarborIP is undefined

- name: Set Certificate for Harbor
  replace:
    path: "{{ HARBOR_DIR }}/harbor/harbor.yml"
    regexp: "certificate: .*"
    replace: "certificate: {{ HARBOR_DIR }}/harbor/cert/ca.crt"
  when: HarborIP is undefined

- name: Set Key for Harbor
  replace:
    path: "{{ HARBOR_DIR }}/harbor/harbor.yml"
    regexp: "private_key: .*"
    replace: "private_key: {{ HARBOR_DIR }}/harbor/cert/ca.key"
  when: HarborIP is undefined

- name: Remove Old Harbor Root When ENABLE_PERSISTENCE is false
  file:
    path: "{{ HARBOR_ROOT }}"
    state: absent
<<<<<<< HEAD
  when: ENABLE_PERSISTENCE is false and HarborIP is undefined
=======
  when: ENABLE_PERSISTENCE == false
>>>>>>> 6b9e1feab4793cd8ac76af2478f1afbe34af0953

- name: Create Directory for Harbor Root
  file:
    path: "{{ HARBOR_ROOT }}"
    state: directory
  when: HarborIP is undefined

- name: Set Data Volume for Harbor
  replace:
    path: "{{ HARBOR_DIR }}/harbor/harbor.yml"
    regexp: "data_volume: .*"
    replace: "data_volume: {{ HARBOR_DATA_VOLUME }}"
  when: HarborIP is undefined

- name: Set Password for Harbor Admin User
  replace:
    path: "{{ HARBOR_DIR }}/harbor/harbor.yml"
    regexp: "harbor_admin_password: .*"
    replace: "harbor_admin_password: {{ HARBOR_ADMIN_PASSWORD }}"
  when: HarborIP is undefined

- name: Install Harbor
  shell: bash install.sh
  args:
    chdir: "{{ HARBOR_DIR }}/harbor"
  when: HarborIP is undefined

- name: Docker Login Harbor
  shell: docker login -u admin -p {{ HARBOR_ADMIN_PASSWORD }} {{ HarborIP }}
  register: harborLogin
  until: harborLogin is succeeded
  retries: 12
  delay: 5
  no_log: true
  ignore_errors: yes

- name: Output of "Docker Login Harbor" task
  debug:
    msg: "rc: {{harborLogin.rc}}, stderr: {{harborLogin.stderr}}, stderr_lines: {{harborLogin.stderr_lines}}, stdout: {{harborLogin.stdout}}, stdout_lines: {{harborLogin.stdout_lines}}"
  when: harborLogin is failed

- name: Failing as task "Docker Login Harbor" failed
  fail:
    msg: The task Docker Login Harbor has failed
  when: harborLogin is failed

- name: Check Whether appstore Project Already Exists
  uri:
    url: "https://{{ HarborIP }}/api/v2.0/projects?project_name=appstore"
    user: admin
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    method: HEAD
    validate_certs: no
    force_basic_auth: yes
    headers:
      Accept: application/json
  register: getAppstoreProject
  ignore_errors: yes

- name: Create appstore Project
  uri:
    url: "https://{{ HarborIP }}/api/v2.0/projects"
    user: admin
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    method: POST
    validate_certs: no
    force_basic_auth: yes
    headers:
      Content-Type: application/json
      Accept: application/json
    body_format: json
    body: {"project_name":"appstore","metadata":{"public":"true"}}
    status_code: 201
  when: getAppstoreProject.status != 200

- name: Check Whether developer Project Already Exists
  uri:
    url: "https://{{ HarborIP }}/api/v2.0/projects?project_name=developer"
    user: admin
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    method: HEAD
    validate_certs: no
    force_basic_auth: yes
    headers:
      Accept: application/json
  register: getDeveloperProject
  ignore_errors: yes

- name: Create developer Project
  uri:
    url: "https://{{ HarborIP }}/api/v2.0/projects"
    user: admin
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    method: POST
    validate_certs: no
    force_basic_auth: yes
    headers:
      Content-Type: application/json
      Accept: application/json
    body_format: json
    body: {"project_name":"developer","metadata":{"public":"true"}}
    status_code: 201
  when: getDeveloperProject.status != 200

- name: Check Whether mecm Project Already Exists
  uri:
    url: "https://{{ HarborIP }}/api/v2.0/projects?project_name=mecm"
    user: admin
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    method: HEAD
    validate_certs: no
    force_basic_auth: yes
    headers:
      Accept: application/json
  register: getMecmProject
  ignore_errors: yes

- name: Create mecm Project
  uri:
    url: "https://{{ HarborIP }}/api/v2.0/projects"
    user: admin
    password: "{{ HARBOR_ADMIN_PASSWORD }}"
    method: POST
    validate_certs: no
    force_basic_auth: yes
    headers:
      Content-Type: application/json
      Accept: application/json
    body_format: json
    body: {"project_name":"mecm","metadata":{"public":"true"}}
    status_code: 201
  when: getMecmProject.status != 200

- name: Create docker-registry Secret For Harbor
  shell: kubectl create secret docker-registry harbor --docker-server=https://{{ HarborIP }} --docker-username=admin --docker-password={{ HARBOR_ADMIN_PASSWORD }}
  no_log: true
  ignore_errors: yes
  register: harbor_secret

- name: Output of "Create docker-registry Secret For Harbor" task
  debug:
    msg: "rc: {{harbor_secret.rc}}, stderr: {{harbor_secret.stderr}}, stderr_lines: {{harbor_secret.stderr_lines}}, stdout: {{harbor_secret.stdout}}, stdout_lines: {{harbor_secret.stdout_lines}}"
  when: harbor_secret is failed

- name: Failing as task "Create docker-registry Secret For Harbor" failed
  fail:
    msg: The task Create docker-registry Secret For Harbor has failed
  when: harbor_secret is failed

- name: Add Harbor Secret to Default serviceaccount
  shell: >
    kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "harbor"}]}'
