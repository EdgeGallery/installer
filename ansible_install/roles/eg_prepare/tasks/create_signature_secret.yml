#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Set Flag of Input Definition All
  set_fact:
    inputDef: "all"
  when: SIGNATURE_CERT_P12 is defined and SIGNATURE_CERT_CER is defined and SIGNATURE_PWD is defined

- name: Set Flag of Input Definition Partly
  set_fact:
    inputDef: "partly"
  when: inputDef is undefined and (SIGNATURE_CERT_P12 is defined or SIGNATURE_CERT_CER is defined or SIGNATURE_PWD is defined)

- name: Set Flag of Input Definition None
  set_fact:
    inputDef: "none"
  when: inputDef is undefined

- name: All Input of Signature Certs are Defined
  debug:
    msg: "SIGNATURE_CERT_P12, SIGNATURE_CERT_CER and SIGNATURE_PWD are all set, will use them directly."
  when: inputDef == "all"

- name: Not all Input of Signature Certs are Defined
  fail:
    msg: "SIGNATURE_CERT_P12, SIGNATURE_CERT_CER and SIGNATURE_PWD should be set at once."
  when: inputDef == "partly"

- name: All Input of Signature Certs are undefined
  debug:
    msg: "SIGNATURE_CERT_P12, SIGNATURE_CERT_CER and SIGNATURE_PWD are all not set, will be set and create automatically."
  when: inputDef == "none"

- name: Set Signature Certs Params
  set_fact:
    SIGNATURE_PWD: "{{ certPassword }}"
    SIGNATURE_CERT_P12: "{{ SIGNATURE_CERTS_GENERATE_PATH }}/public.p12"
    SIGNATURE_CERT_CER: "{{ SIGNATURE_CERTS_GENERATE_PATH }}/public.cer"
  when: inputDef == "none"

- name: Create Signature Cert Path
  file:
    path: "{{ SIGNATURE_CERTS_GENERATE_PATH }}"
    state: directory
  when: inputDef == "none"

- name: Generate Signature RSA Crt and Key Files
  shell: |
    openssl req -x509 -sha256 -nodes -days 730 -newkey rsa:1024 -passout pass:{{ SIGNATURE_PWD }} \
    -keyout privatekey.pem -out cert.pem  -subj /C=CN/ST=Beijing/L=Biejing/O=edgegallery/CN=edgegallery.org \
    -addext "keyUsage = critical,digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly, decipherOnly" \
    -addext "extendedKeyUsage = critical,1.3.6.1.5.5.7.3.1, 1.3.6.1.5.5.7.3.2, 1.3.6.1.5.5.7.3.3, 1.3.6.1.5.5.7.3.4, 1.3.6.1.5.5.7.3.8, 1.3.6.1.4.1.311.2.1.21, 1.3.6.1.4.1.311.2.1.22, 1.3.6.1.4.1.311.10.3.1, 1.3.6.1.4.1.311.10.3.3, 1.3.6.1.4.1.311.10.3.4, 2.16.840.1.113730.4.1, 1.3.6.1.4.1.311.10.3.4.1, 1.3.6.1.5.5.7.3.5, 1.3.6.1.5.5.7.3.6, 1.3.6.1.5.5.7.3.7, 1.3.6.1.5.5.8.2.2, 1.3.6.1.4.1.311.20.2.2"
  args:
    chdir: "{{ SIGNATURE_CERTS_GENERATE_PATH }}"
  when: inputDef == "none"

- name: Create Signature Certs P12 File
  shell: |
    openssl pkcs12 -passout pass:{{ SIGNATURE_PWD }} -export -out public.p12 -inkey privatekey.pem -in cert.pem
  args:
    chdir: "{{ SIGNATURE_CERTS_GENERATE_PATH }}"
  when: inputDef == "none"

- name: Create Signature Certs CER File
  shell: |
    openssl x509 -outform der -in cert.pem -out public.cer
  args:
    chdir: "{{ SIGNATURE_CERTS_GENERATE_PATH }}"
  when: inputDef == "none"

- name: Create Secret for Signature
  shell: |
    kubectl create secret generic {{ SIGNATURE_SECRET_NAME }} \
      --from-file=sign_p12={{ SIGNATURE_CERT_P12 }} \
      --from-file=sign_cer={{ SIGNATURE_CERT_CER }} \
      --from-literal=certPwd={{ SIGNATURE_PWD }}
  no_log: true
  ignore_errors: yes
  register: secretOut

- name: Output of "Create Secret for Signature" task
  debug:
    msg: "rc: {{secretOout.rc}}, stderr: {{secretOut.stderr}}, stderr_lines: {{secretOut.stderr_lines}}, stdout: {{secretOut.stdout}}, stdout_lines: {{secretOut.stdout_lines}}"
  when: secretOut is failed

- name: Failing as task "Create Secret for Signature" failed
  fail:
    msg: The task Create Secret for Signature has failed
  when: secretOut is failed
