---
- name: Load All EdgeGallery Docker Images
  shell: for f in "{{ TARBALL_PATH }}"/eg_swr_images/*.tar.gz; do docker load -i $f; done

- name: Try to Get Helm Version
  shell: helm version | cut -d \" -f2
  register: helmVersion
  ignore_errors: yes

- name: Helm is Installed
  debug:
    msg: "helm {{ HELM_VERSION }} is already installed"
  when: helmVersion.stdout == (HELM_VERSION)

- name: Helm doesn't be Installed
  debug:
    msg: "helm {{ HELM_VERSION }} is not installed yet"
  when: helmVersion.stdout != (HELM_VERSION)

- name: Unarchive Helm Offline Tarball File
  unarchive:
    src: "{{ HELM_TARBALL_FILE }}"
    dest: "{{ HELM_OFFLINE_DIR }}"
    copy: no
  register: unarchiveHelm
  when: helmVersion.stdout != (HELM_VERSION)

- name : Move Helm Exec File to /usr/local/bin/
  copy:
    src: "{{ HELM_OFFLINE_DIR }}/linux-{{ ARCH }}/helm"
    dest: /usr/local/bin/
    mode: '0755'
    remote_src: yes
  when: helmVersion.stdout != (HELM_VERSION) and unarchiveHelm is succeeded

- name: Check Helm Installed
  shell: helm version
  when: helmVersion.stdout != (HELM_VERSION) and unarchiveHelm is succeeded

- name: Create SSL Certs
  shell: "docker run --rm -e CERT_VALIDITY_IN_DAYS={{ CERT_VALIDITY_IN_DAYS }} -v {{ TARBALL_PATH }}/conf/keys/:/certs edgegallery/deploy-tool:{{ EG_IMAGE_TAG }}"

- name: Create Secret edgegallery-ssl-secret
  shell: |
    kubectl create secret generic edgegallery-ssl-secret \
      --from-file=keystore.p12={{ TARBALL_PATH }}/conf/keys/keystore.p12 \
      --from-literal=keystorePassword={{ keystorePassword }} \
      --from-literal=keystoreType={{ keystoreType }} \
      --from-literal=keyAlias={{ keyAlias }} \
      --from-file=trust.cer={{ TARBALL_PATH }}/conf/keys/ca.crt \
      --from-file=server.cer={{ TARBALL_PATH }}/conf/keys/tls.crt \
      --from-file=server_key.pem={{ TARBALL_PATH }}/conf/keys/encryptedtls.key \
      --from-literal=cert_pwd={{ cert_pwd }}
  when: EG_MODE == "all" or EG_MODE == "controller"

- name: Install Service Center
  shell: |
    helm install --wait service-center-edgegallery {{ HELM_CHARTS_PATH }}/edgegallery/servicecenter-{{ HELM_TAG }}.tgz \
    --set images.repository={{ servicecenter_images_repository }} \
    --set images.pullPolicy={{ servicecenter_images_pullPolicy }} \
    --set global.ssl.enabled={{ servicecenter_global_ssl_enabled }} \
    --set global.ssl.secretName={{ servicecenter_global_ssl_secretName }}
  when: EG_MODE == "all" or EG_MODE == "controller"
