#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Load All EdgeGallery Docker Images
  shell: for f in "{{ TARBALL_PATH }}"/eg_swr_images/*.tar.gz; do docker load -i $f; done
  when: K8S_NODE_TYPE == "master"

- name: Push All EG Images to Registry
  import_tasks: push_images_to_registry.yml
  when: NODE_MODE == "muno" and K8S_NODE_TYPE == "master"

- name: Setup Helm Repo
  import_tasks: setup_helm_repo.yml
  when: NODE_MODE == "muno" and K8S_NODE_TYPE == "master"

- name: Master Node Setup EG Resources
  import_tasks: setup_master_resources.yml
  when: K8S_NODE_TYPE == "master"

- name: Get EG_NODE_EDGE_MP1
  shell: ip a | grep -B2 {{ ansible_default_ipv4['address'] }} | head -n1 | cut -d ":" -f2 |cut -d " " -f2
  register: mp1

- name: Get EG_NODE_EDGE_MM5
  shell: ip a | grep -B2 {{ ansible_default_ipv4['address'] }} | head -n1 | cut -d ":" -f2 |cut -d " " -f2
  register: mm5

- name: Set EG_NODE_EDGE_MP1
  set_fact:
    EG_NODE_EDGE_MP1: "{{ mp1.stdout }}"
  when: EG_NODE_EDGE_MP1 is undefined

- name: Set EG_NODE_EDGE_MM5
  set_fact:
    EG_NODE_EDGE_MM5: "{{ mm5.stdout }}"
  when: EG_NODE_EDGE_MM5 is undefined

- name: Setup Persistent Network Interface Config File
  import_tasks: create_network_interface_setting.yml
  when: K8S_NODE_TYPE == "worker" or K8S_NODE_TYPE == "master"

- name: Setup Master Node Network Interface
  import_tasks: master_network_interface_setting.yml
  when: K8S_NODE_TYPE == "master"

- name: Setup Worker Node Network Interface
  import_tasks: worker_network_interface_setting.yml
  when: K8S_NODE_TYPE == "worker"

- name: Setup Harbor on Master Node
  import_tasks: master_harbor.yml
  when: K8S_NODE_TYPE == "master" and EG_MODE != "edge" and ARCH == "amd64"

- name: Add Harbor IP to All Workers
  add_host:
    name: "{{ item.1 }}"
    HarborIP: "{{ HarborIP }}"
  with_indexed_items: "{{ groups.worker }}"
  when: NODE_MODE == "muno" and K8S_NODE_TYPE == "master" and EG_MODE != "edge" and ARCH == "amd64"

- name: Login Harbor on Worker Node
  shell: docker login -u admin -p {{ HARBOR_ADMIN_PASSWORD }} {{ HarborIP }}
  when: K8S_NODE_TYPE == "worker" and EG_MODE != "edge" and ARCH == "amd64"
  no_log: true
  ignore_errors: yes
  register: harbor_login

- name: Output of "Login Harbor on Worker Node" task
  debug:
    msg: "rc: {{harbor_login.rc}}, stderr: {{harbor_login.stderr}}, stderr_lines: {{harbor_login.stderr_lines}}, stdout: {{harbor_login.stdout}}, stdout_lines: {{harbor_login.stdout_lines}}"
  when: harbor_login is failed

- name: Failing as task "Login Harbor on Worker Node" failed
  fail:
    msg: The task Login Harbor on Worker Node has failed
  when: harbor_login is failed
