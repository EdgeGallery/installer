#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---

- name: Load All EdgeGallery Docker Images
  shell: for f in "{{ TARBALL_PATH }}"/eg_swr_images/*.tar.gz; do docker load -i $f; done
  when: K8S_NODE_TYPE == "master"

- name: Push All EG Images to Registry
  import_tasks: push_images_to_registry.yml
  when: NODE_MODE == "muno" and K8S_NODE_TYPE == "master"

- name: Setup Helm Repo
  import_tasks: setup_helm_repo.yml
  when: NODE_MODE == "muno" and K8S_NODE_TYPE == "master"

- name: Master Node Setup EG Resources
  import_tasks: setup_master_resources.yml
  when: K8S_NODE_TYPE == "master"

- name: Get EG_NODE_EDGE_MP1
  shell: ip a | grep -B2 {{ ansible_default_ipv4['address'] }} | head -n1 | cut -d ":" -f2 |cut -d " " -f2
  register: mp1

- name: Get EG_NODE_EDGE_MM5
  shell: ip a | grep -B2 {{ ansible_default_ipv4['address'] }} | head -n1 | cut -d ":" -f2 |cut -d " " -f2
  register: mm5

- name: Set EG_NODE_EDGE_MP1
  set_fact:
    EG_NODE_EDGE_MP1: "{{ mp1.stdout }}"
  when: EG_NODE_EDGE_MP1 is undefined

- name: Set EG_NODE_EDGE_MM5
  set_fact:
    EG_NODE_EDGE_MM5: "{{ mm5.stdout }}"
  when: EG_NODE_EDGE_MM5 is undefined

- name: Setup Persistent Network Interface Config File
  import_tasks: create_network_interface_setting.yml
  when: K8S_NODE_TYPE == "worker" or K8S_NODE_TYPE == "master"

- name: Setup Master Node Network Interface
  import_tasks: master_network_interface_setting.yml
  when: K8S_NODE_TYPE == "master"

- name: Setup Worker Node Network Interface
  import_tasks: worker_network_interface_setting.yml
  when: K8S_NODE_TYPE == "worker"

- name: Setup Harbor on Master Node
  import_tasks: master_harbor.yml
  when: K8S_NODE_TYPE == "master" and EG_MODE != "edge" and HarborIP is defined

- name: Login Harbor on Worker Node
  shell: docker login -u admin -p {{ HARBOR_ADMIN_PASSWORD }} {{ HarborIP }}
  when: K8S_NODE_TYPE == "worker" and EG_MODE != "edge" and HarborIP is defined
  no_log: true
  ignore_errors: yes
  register: harbor_login

- name: Output of "Login Harbor on Worker Node" task
  debug:
    msg: "rc: {{harbor_login.rc}}, stderr: {{harbor_login.stderr}}, stderr_lines: {{harbor_login.stderr_lines}}, stdout: {{harbor_login.stdout}}, stdout_lines: {{harbor_login.stdout_lines}}"
  when: harbor_login is failed

- name: Failing as task "Login Harbor on Worker Node" failed
  fail:
    msg: The task Login Harbor on Worker Node has failed
  when: harbor_login is failed

- name: add rc-local intall configure
  blockinfile:
    path:  /lib/systemd/system/rc.local.service
    insertafter: "GuessMainPID=no"
    state: present
    marker:
    block: |
      [Install]
      WantedBy=multi-user.target

- name: Remove rc.local.service file blank lines blockinfile put in
  replace:
    path: /lib/systemd/system/rc.local.service
    regexp: 'None'
    replace: ""

- name: Set network_interface for AIO Mode Automatically After Reboot VM
  blockinfile:
    path: /etc/rc.local
    create: yes
    mode: 0733
    state: present
    marker: ""
    insertafter: EOF
    block: | 
      #!/bin/bash
      sleep 10
      swapoff -a
      ip link add eg-mp1 link {{ EG_NODE_EDGE_MP1}} type macvlan mode bridge
      ip addr add 200.1.1.{{ ipPrefix }}/24 dev eg-mp1
      ip link set dev eg-mp1 up
      ip link add eg-mm5 link {{EG_NODE_EDGE_MM5}} type macvlan mode bridge
      ip addr add 100.1.1.{{ ipPrefix }}/24 dev eg-mm5
      ip link set dev eg-mm5 up
  when: NODE_MODE == "aio"

- name: Set network_interface for MUNO Mode Automatically After Reboot VM
  blockinfile:
    path: /etc/rc.local
    create: yes
    mode: 0733
    state: present
    marker: ""
    insertafter: EOF
    block: | 
      #!/bin/bash
      sleep 10 
      swapoff -a
      ip link add vxlan-mp1 type vxlan id 100 group 239.1.1.1 dstport 4789 dev {{EG_NODE_EDGE_MP1}}
      ip link set vxlan-mp1 up
      ip link add vxlan-mm5 type vxlan id 200 group 239.1.1.1 dstport 4789 dev {{EG_NODE_EDGE_MM5}}
      ip link set vxlan-mm5 up
      ip link add eg-mp1 link vxlan-mp1 type macvlan mode bridge
      ip addr add 200.1.1.{{ ipPrefix }}/24 dev eg-mp1
      ip link set dev eg-mp1 up
      ip link add eg-mm5 link vxlan-mm5 type macvlan mode bridge
      ip addr add 100.1.1.{{ ipPrefix }}/24 dev eg-mm5
      ip link set dev eg-mm5 up
  when: NODE_MODE == "muno"

- name: Set Mode of docker.sock Automatically After Reboot VM
  blockinfile:
    path: /etc/rc.local
    create: yes
    mode: 0733
    state: present
    marker: ""
    insertafter: EOF
    block: |
      systemctl start docker
      timeout=360
      while [[ ! `docker ps` && $timeout -gt 0 ]];
      do
          sleep 5
          let timeout=$timeout-5
      done
      chmod 0666 /var/run/docker.sock

- name: Start Harbor Automatically After Reboot VM
  blockinfile:
    path: /etc/rc.local
    create: yes
    mode: 0733
    state: present
    marker: ""
    insertafter: EOF
    block: |
      cd /home/edgegallery-offline/harbor/harbor
      docker-compose start
  when: ((PORTAL_IP is defined and HarborIP == PORTAL_IP) or HarborIP == groups.master[0]) and ARCH == "amd64"

- name: Remove blank lines blockinfile put in
  lineinfile:
    path: /etc/rc.local
    state: absent
    regexp: '^$'

- name: Restart rc.local.service
  service:
    name: rc.local.service
    enabled: yes
    state: restarted
