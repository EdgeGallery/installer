############################################################################
# Copyright 2021 Huawei Technologies Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############################################################################

---

- name: Clean K8S Offline Directory
  file:
    path: "{{ K8S_OFFLINE_DIR }}"
    state: absent

- name: Create Related K8S Offline Directories
  file:
    path: "{{ K8S_OFFLINE_DIR }}/{{ item }}"
    state: directory
  loop:
    - ./
    - docker
    - docker/images
    - k8s
    - tools
    - cni

- name: Download Docker Offline Packages
  import_tasks: download_docker.yml

- name: Download K8S Offline Packages
  import_tasks: download_k8s.yml

- name: Copy CNI Tar File From FTP Server
  shell: "scp -r -P {{ FTP_SSH_PORT }} root@{{ FTP_SERVER }}:/home/cni/cni-plugins-linux-{{ ARCH }}-v0.8.7.tgz {{ K8S_OFFLINE_DIR }}"

- name: Unarchive CNI Tar File
  unarchive:
    src: "{{ K8S_OFFLINE_DIR }}/cni-plugins-linux-{{ ARCH }}-v0.8.7.tgz"
    dest: "{{ K8S_OFFLINE_DIR }}/cni"
    copy: yes

- name: Remove CNI Tar File
  file:
    path: "{{ K8S_OFFLINE_DIR }}/cni-plugins-linux-{{ ARCH }}-v0.8.7.tgz"
    state: absent

- name: Set K8S Image List for AMD64
  set_fact:
    k8s_image_list: "{{ K8S_DOCKER_IMAGES_AMD64 }}"
  when: ARCH == "amd64"

- name: Set K8S Image List for ARM64
  set_fact:
    k8s_image_list: "{{ K8S_DOCKER_IMAGES_ARM64 }}"
  when: ARCH == "arm64"

- name: Pull and Retag All K8S Related Docker Images
  shell: |
    docker pull {{ item }}
    new_image_name=`echo {{ item }} | sed -e "s#swr.cn-north-4.myhuaweicloud.com/eg-common/##g" | sed -e "s#-arm64##g"`
    docker image tag {{ item }} $new_image_name
  loop: "{{ k8s_image_list }}"

- name: Set K8S Image List Str
  set_fact:
    k8s_image_str: "{{ k8s_image_list|join(' ') }}"

- name: Save All K8S Docker Images Together
  shell: |
    new_image_list=`echo {{ k8s_image_str }} | sed -e "s#swr.cn-north-4.myhuaweicloud.com/eg-common/##g" | sed -e "s#-arm64##g"`
    docker save $new_image_list | gzip > {{ K8S_OFFLINE_DIR }}/docker/images/k8s_images.tar.gz
    echo $new_image_list >> {{ K8S_OFFLINE_DIR }}/docker/images/k8s_images_list.txt

- name: Archive K8S Offline Package
  community.general.archive:
    path: "{{ K8S_OFFLINE_DIR }}/*"
    dest: "{{ TARBALL_PATH }}/kubernetes_offline_installer.tar.gz"
    format: gz
    remove: no
    force_archive: yes

- name: Remove Original Files
  file:
    path: "{{ K8S_OFFLINE_DIR }}"
    state: absent

- name: Create NFS Directory
  file:
    path: "{{ NFS_OFFLINE_DIR }}"
    state: directory

- name: Copy NFS Packages From FTP Server
  shell: "scp -r -P {{ FTP_SSH_PORT }} root@{{ FTP_SERVER }}:/home/nfs/{{ ARCH }} {{ NFS_OFFLINE_DIR }}/deb"

- name: Create NFS Images Directory
  file:
    path: "{{ NFS_OFFLINE_DIR }}/images"
    state: directory

- name: Pull Retag and Save NFS Images For AMD64
  shell: |
    docker pull {{ NFS_DOCKER_IMAGES_AMD64 }}
    new_image_name=`echo {{ NFS_DOCKER_IMAGES_AMD64 }} | sed -e "s#swr.cn-north-4.myhuaweicloud.com/##g"`
    docker image tag {{ NFS_DOCKER_IMAGES_AMD64 }} $new_image_name
    docker save $new_image_name | gzip > {{ NFS_OFFLINE_DIR }}/images/nfs_images.tar.gz
  when: ARCH == "amd64"

- name: Pull and Retag NFS Images For ARM64
  shell: |
    docker pull {{ NFS_DOCKER_IMAGES_ARM64 }}
    new_image_name=`echo {{ NFS_DOCKER_IMAGES_ARM64 }} | sed -e "s#swr.cn-north-4.myhuaweicloud.com/##g"`
    docker image tag {{ NFS_DOCKER_IMAGES_ARM64 }} $new_image_name
    docker save $new_image_name | gzip > {{ NFS_OFFLINE_DIR }}/images/nfs_images.tar.gz
  when: ARCH == "arm64"
