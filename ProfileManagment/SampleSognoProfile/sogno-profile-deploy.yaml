---
apiVersion: v1
data:
  config.yaml: |-
    config:
      fledge:
        hostUrl: http://fledge:8081
        north:
          default:
            type: mqtt
            topic: fledge
        readiness:
          httpGet: /fledge/ping
      sogno:
        hostUrl: http://fledge-adapter:8000
        readiness:
          httpGet: /sogno/fledgeadapter/ping
    broker:
      host: mqtt
      port: 1883
  profile.yaml: |-
    profile:
      - fledge:
          south:
            - type: mqtt-readings
              topic: /dpsim-fledge
              installPlugin: true
      - sogno:
          south:
            - brokerHost: mqtt
              brokerPort: "1883"
              topic: fledge
kind: ConfigMap
metadata:
  name: profile-conf
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: profile-config
  name: profile-config
spec:
  template:
    metadata:
      labels:
        app: profile-config
    spec:
      containers:
        - image: swr.ap-southeast-1.myhuaweicloud.com/edgegallery/profile-manager:latest
          imagePullPolicy: IfNotPresent
          name: config
          volumeMounts:
            - name: profile-vol
              mountPath: /conf/
      restartPolicy: Never
      volumes:
        - name: profile-vol
          configMap:
            name: profile-conf
            items:
              - key: config.yaml
                path: config.yaml
                mode: 0644
              - key: profile.yaml
                path: profile.yaml
                mode: 0644
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fledge
  name: fledge
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fledge
  template:
    metadata:
      labels:
        app: fledge
    spec:
      containers:
        - image: libujacob/fledge:latest
          name: fledge-core
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
        - image: libujacob/fledge-gui:latest
          name: fledge-gui
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: fledge-ext
  name: fledge-ext
spec:
  type: NodePort
  ports:
    - name: "fledge-core-ext"
      nodePort: 32681
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: "fledge-gui"
      nodePort: 32680
      port: 8080
      protocol: TCP
      targetPort: 80
  selector:
    app: fledge
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: fledge
  name: fledge
spec:
  ports:
    - name: "fledge"
      port: 8081
      protocol: TCP
      targetPort: 8081
  selector:
    app: fledge
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mqtt
  name: mqtt
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqtt
  template:
    metadata:
      labels:
        app: mqtt
    spec:
      containers:
        - image: emqx/emqx:latest
          name: mqtt
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1883
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mqtt
  name: mqtt
spec:
  ports:
    - name: "broker"
      port: 1883
      targetPort: 1883
  selector:
    app: mqtt
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mqtt-ext
  name: mqtt-ext
spec:
  type: NodePort
  ports:
    - name: "mqtt-ext"
      port: 1883
      targetPort: 1883
      nodePort: 30883
      protocol: TCP
  selector:
    app: mqtt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: fledge-adapter
  name: fledge-adapter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fledge-adapter
  template:
    metadata:
      labels:
        app: fledge-adapter
    spec:
      containers:
        - image: bhanusoni/fledge-adapter
          name: fledge-adapter
          imagePullPolicy: Always
          env:
            - name: MQTT_RABBITMQ_BROKER
              value: rabbitmq
              #- name: MQTT_RABBITMQ_PORT
              #value: "1883"
            - name: MQTT_RABBITMQ_USER
              value: admin
            - name: MQTT_RABBITMQ_PWD
              value: ''
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: fledge-adapter
  name: fledge-adapter
spec:
  ports:
    - name: "fledge-adapter"
      port: 8000
      targetPort: 8000
  selector:
    app: fledge-adapter
---
# Source: rabbitmq/templates/configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
data:
  rabbitmq.conf: |-
    ## Username and password
    ##
    default_user = admin
    default_pass = 
    ## Clustering
    ##
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.node_cleanup.interval = 10
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    # queue master locator
    queue_master_locator = min-masters
    # enable guest user
    loopback_users.guest = false
    #default_vhost = default-vhost
    #disk_free_limit.absolute = 50MB
    #load_definitions = /app/load_definition.json
---
# Source: rabbitmq/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create"]
---
# Source: rabbitmq/templates/rolebinding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rabbitmq-endpoint-reader
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
subjects:
  - kind: ServiceAccount
    name: rabbitmq
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq-endpoint-reader
---
# Source: rabbitmq/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  rabbitmq-password: ""
  rabbitmq-erlang-cookie: ""
---
# Source: rabbitmq/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
secrets:
  - name: rabbitmq
---
# Source: rabbitmq/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq
      app.kubernetes.io/instance: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rabbitmq
        helm.sh/chart: rabbitmq-8.26.0
        app.kubernetes.io/instance: rabbitmq
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 
        checksum/secret: 
    spec:
      
      serviceAccountName: rabbitmq
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: rabbitmq
                    app.kubernetes.io/instance: rabbitmq
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      terminationGracePeriodSeconds: 120
      containers:
        - name: rabbitmq
          image: docker.io/bitnami/rabbitmq:3.9.12-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "rabbitmq-headless"
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_FORCE_BOOT
              value: "no"
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: "no"
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_LOAD_DEFINITIONS
              value: "no"
            - name: RABBITMQ_SECURE_PASSWORD
              value: "yes"
            - name: RABBITMQ_USERNAME
              value: "admin"
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: "rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_mqtt"
          ports:
            - name: amqp
              containerPort: 5672
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q ping
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then
                        /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t "120" -d  "false"
                    else
                        rabbitmqctl stop_app
                    fi
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
      volumes:
        - name: configuration
          configMap:
            name: rabbitmq-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
        - name: data
          emptyDir: {}
---
# Source: rabbitmq/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  externalTrafficPolicy: "Cluster"
  ports:
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
    - name: mqtt
      nodePort: 31883
      port: 1883
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: rabbitmq
---
# Source: rabbitmq/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-headless
  namespace: "default"
  labels:
    app.kubernetes.io/name: rabbitmq
    helm.sh/chart: rabbitmq-8.26.0
    app.kubernetes.io/instance: rabbitmq
    app.kubernetes.io/managed-by: Helm
spec:
  clusterIP: None
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: dist
      port: 25672
      targetPort: dist
    - name: http-stats
      port: 15672
      targetPort: stats
  selector: 
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/instance: rabbitmq
  publishNotReadyAddresses: true
---
# Source: pintura/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pintura
  labels:
    helm.sh/chart: pintura-0.1.1
    app.kubernetes.io/name: pintura
    app.kubernetes.io/instance: pintura
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pintura
      app.kubernetes.io/instance: pintura
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pintura
        app.kubernetes.io/instance: pintura
    spec:
      serviceAccountName: pintura
      securityContext:
        {}
      containers:
        - name: pintura
          securityContext:
            {}
          image: "docker.io/sogno/pintura:latest"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
# Source: pintura/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pintura
  labels:
    helm.sh/chart: pintura-0.1.1
    app.kubernetes.io/name: pintura
    app.kubernetes.io/instance: pintura
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
      nodePort: 31234
  selector:
    app.kubernetes.io/name: pintura
    app.kubernetes.io/instance: pintura
---
# Source: pintura/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pintura
  labels:
    helm.sh/chart: pintura-0.1.1
    app.kubernetes.io/name: pintura
    app.kubernetes.io/instance: pintura
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: pyvolt-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pyvolt-demo-pyvolt-service
  labels:
    helm.sh/chart: pyvolt-service-0.1.0
    app.kubernetes.io/name: pyvolt-service
    app.kubernetes.io/instance: pyvolt-demo
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pyvolt-service
      app.kubernetes.io/instance: pyvolt-demo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pyvolt-service
        app.kubernetes.io/instance: pyvolt-demo
    spec:
      serviceAccountName: pyvolt-demo-pyvolt-service
      securityContext:
        {}
      containers:
        - name: pyvolt-service
          securityContext:
            {}
          image: "sogno/pyvolt-service:demo.v1.0"
          imagePullPolicy: Always
          env:
            - name: "MQTT_BROKER"
              value: rabbitmq
            - name: "MQTT_PORT"
              value: "1883"
            - name: "MQTT_USER"
              valueFrom:
                secretKeyRef:
                  key: mqtt_user
                  name: pyvolt-demo-mqtt-auth
            - name: "MQTT_PWD"
              valueFrom:
                secretKeyRef:
                  key: mqtt_pwd
                  name: pyvolt-demo-mqtt-auth
          resources:
            {}
---
# Source: pyvolt-service/templates/mqtt-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: pyvolt-demo-mqtt-auth
data:
  mqtt_user: ""
  mqtt_pwd: ""
---
# Source: pyvolt-service/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pyvolt-demo-pyvolt-service
  labels:
    helm.sh/chart: pyvolt-service-0.1.0
    app.kubernetes.io/name: pyvolt-service
    app.kubernetes.io/instance: pyvolt-demo
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
